# Generated by Django 3.2.6 on 2021-12-01 00:41

from django.db import migrations, models


def load_positions(apps, schema_name):
    Position = apps.get_model("roulette", "Position")

    for i in range(37):
        # Numbers from 0 to 36
        Position(name = str(i), payout = 36, winning_numbers = str(i), roullete_position = True).save()
        
    Position(name = "Even",    payout = 2, winning_numbers = ','.join([str(i) for i in range(2,37,2)])).save()
    Position(name = "Odd",     payout = 2, winning_numbers = ','.join([str(i) for i in range(1,37,2)])).save()
    Position(name = "1To18",   payout = 2, winning_numbers = ','.join([str(i) for i in range(1,19)])).save()
    Position(name = "19To36",  payout = 2, winning_numbers = ','.join([str(i) for i in range(19,37)])).save()
    Position(name = "1st12",   payout = 3, winning_numbers = ','.join([str(i) for i in range(1,13)])).save()
    Position(name = "2nd12",   payout = 3, winning_numbers = ','.join([str(i) for i in range(13,25)])).save()
    Position(name = "3rd12",   payout = 3, winning_numbers = ','.join([str(i) for i in range(25,37)])).save()
    Position(name = "column1", payout = 3, winning_numbers = ','.join([str(i) for i in range(1,37,3)])).save()
    Position(name = "column2", payout = 3, winning_numbers = ','.join([str(i) for i in range(2,37,3)])).save()
    Position(name = "column3", payout = 3, winning_numbers = ','.join([str(i) for i in range(3,37,3)])).save()
    Position(name = "red",     payout = 2, winning_numbers = '1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36').save()
    Position(name = "black",   payout = 2, winning_numbers = '2,4,6,8,10,11,13,15,17,20,22,24,26,28,29,31,33,35').save()

    for i in range(1,4):
        Position(name = f'0,{i}', payout = 18, winning_numbers = f'0,{i}').save()
        if i < 3:
            Position(name = f'0,{i},{i+1}', payout = 12, winning_numbers = f'0,{i},{i+1}').save()
    Position(name = "0,1,2,3", payout = 9, winning_numbers = '0,1,2,3').save()
    
    for i in range(1,37,3):
        Position(name = f'{i},{i+1}', payout = 18, winning_numbers = f'{i},{i+1}').save()
        Position(name = f'{i+1},{i+2}', payout = 18, winning_numbers = f'{i+1},{i+2}').save()
        Position(name = f'{i},{i+1},{i+2}', payout = 12, winning_numbers = f'{i},{i+1},{i+2}').save()
        if i < 34:
            Position(name = f'{i},{i+3}', payout = 18, winning_numbers = f'{i},{i+3}').save()
            Position(name = f'{i+1},{i+4}', payout = 18, winning_numbers = f'{i+1},{i+4}').save()
            Position(name = f'{i+2},{i+5}', payout = 18, winning_numbers = f'{i+2},{i+5}').save()
            Position(name = f'{i},{i+1},{i+2},{i+3},{i+4},{i+5}', payout = 6, winning_numbers = f'{i},{i+1},{i+2},{i+3},{i+4},{i+5}').save()
            Position(name = f'{i},{i+1},{i+3},{i+4}', payout = 9, winning_numbers = f'{i},{i+1},{i+3},{i+4}').save()
            Position(name = f'{i+1},{i+2},{i+4},{i+5}', payout = 9, winning_numbers = f'{i+1},{i+2},{i+4},{i+5}').save()

def delete_positions(apps, schema_name):
    Position = apps.get_model("roulette", "Position")
    Position.objects.all().delete()

def load_methods(apps, schema_name):
    Method = apps.get_model("roulette", "Method")
    Method(name = 'Fibonacci', description = 'If you lose, the next bet is increased using Fibonacci multiplier (excepting start 0). (1,1,2,3,5,8,13...). If you win, it starts from initial bet.').save()
    Method(name = 'Martingale', description = 'If you lose, the next bet is doubled. If you win, it starts from initial bet.').save()
    Method(name = 'D.Alembert', description = 'If you lose, the next bet = [lost bet + 1 unit (initial bet)]. If you win, the next bet = [won bet - 1 unit (initial bet)].').save()

def delete_methods(apps, schema_name):
    Method = apps.get_model("roulette", "Method")
    Method.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('roulette', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(load_positions, delete_positions),
        migrations.RunPython(load_methods, delete_methods),
    ]
